install.packages("readxl")
library(readxl)
data <- read_excel("~/Desktop/US_Births.xlsx")
# Assuming your dataframe is named US_Births_1_
US_Births$Yr_Mo <- as.character(US_Births_1_$Yr_Mo)
# Assuming your dataframe is named US_Births_1_
US_Births$Yr_Mo <- as.character(US_Births$Yr_Mo)
# Assuming your dataframe is named US_Births_1_
data$Yr_Mo <- as.character(data$Yr_Mo)
# Extract Year and Month using substr
data$Year <- substr(data$Yr_Mo, 1, 4)
data$Month <- substr(data$Yr_Mo, 5, 6)
# Convert Year and Month back to numeric if needed
data$Year <- as.numeric(data$Year)
data$Month <- as.numeric(data$Month)
install.packages("forecast")
install.packages("ggplot2")
install.packages("forecast")
install.packages("ggplot2")
baby.df <- read_excel("~/Desktop/US_Births.xlsx")
# Assuming your dataframe is named US_Births_1_
baby.df$Yr_Mo <- as.character(baby.df$Yr_Mo)
# Extract Year and Month using substr
baby.df$Year <- substr(baby.df$Yr_Mo, 1, 4)
baby.df$Month <- substr(baby.df$Yr_Mo, 5, 6)
# Convert Year and Month back to numeric if needed
baby.df$Year <- as.numeric(baby.df$Year)
baby.df$Month <- as.numeric(baby.df$Month)
print(baby.df) # print the dataframe
baby.df$Census <- with(baby.df, Admits*ALOS*12/365)
source("~/.active-rstudio-document")
install.packages("forecast")
install.packages("ggplot2")
baby.df <- read_excel("~/Desktop/US_Births.xlsx")
origin.df <- read_excel("~/Desktop/US_Births.xlsx")
# Assuming your dataframe is named US_Births_1_
baby.df$Yr_Mo <- as.character(baby.df$Yr_Mo)
# Extract Year and Month using substr
baby.df$Year <- substr(baby.df$Yr_Mo, 1, 4)
baby.df$Month <- substr(baby.df$Yr_Mo, 5, 6)
# Convert Year and Month back to numeric if needed
baby.df$Year <- as.numeric(baby.df$Year)
baby.df$Month <- as.numeric(baby.df$Month)
print(baby.df)
origindata.df <- baby.df
origindata.df <- subset(origindata.df, select = -Year)
origindata.df <- subset(origindata.df, select = -Month)
library(dplyr)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
origindata <- origindata %>% rename(Live Births = Live_Births)
origindata <- origindata %>% rename(Live_Births = `Live Births`)
origindata.df <- origindata.df %>% rename(Live_Births = `Live Births`)
names(origindata.df)[names(origindata.df) == 'Live_Births'] <- 'LiveBirths'
names(origindata.df)[names(origindata.df) == 'LiveBirths'] <- 'Live_Births'
colnames(origindata)[colnames(origindata) == 'Live_Births'] <- 'LiveBirths'
colnames(origindata.df)[colnames(origindata.df) == 'Live_Births'] <- 'LiveBirths'
colnames(baby.df)[colnames(baby.df) == 'Live Births'] <- 'Live_Births'
baby.df$Census <- with(baby.df, Live_Births*12/365) # create the Census attribute
print(baby.df) # print the dataframe
baby.df$Census <- with(baby.df, Live_Births*12/365)
print(baby.df)
library(forecast)
library(ggplot2)
ggseasonplot(Census.ts, ylab ='Census')
# Convert 'Census' to a time series object
Census.ts <- ts(baby.df$Census, start = c(min(baby.df$Year), 1), frequency = 12)
# Plot the seasonal plot
ggseasonplot(Census.ts, ylab = 'Census')
setwd("~/Documents/sdohplace-toolkit")
housing = read.csv("o4rtestdata/Affordable_Rental_Housing_Developments.csv")
Chi_Zipsf <- st_read("o4rtestdata/ChiZipMaster1.geojson")
# Load the necessary libraries
library(sf)
library(dplyr)
Chi_Zipsf <- st_read("o4rtestdata/ChiZipMaster1.geojson")
join_data <- Chi_Zipsf[housing, ]
View(housing)
zipcode <- st_read("o4rtestdata/ChiZipMaster1.geojson")
housing_sf <- st_as_sf(housing, coords = c("longitude", "latitude"), crs = 4326)
housing_sf <- st_as_sf(housing, coords = c("Longitude", "Latitude"), crs = 4326)
AffHousing <- na.omit(AffHousing)
housing <- na.omit(housing)
housing_sf <- st_as_sf(housing, coords = c("Longitude", "Latitude"), crs = 4326)
housing <- st_as_sf(housing, coords = c("Longitude", "Latitude"), crs = 4326)
# Count the number of housing developments in each zipcode area
zip_housing_count <- st_join(zipcode, housing, join = st_intersects) %>%
group_by(zipcode) %>%
summarise(housing_count = n())
# Count the number of housing developments in each zipcode area
zip_housing_count <- st_join(zipcode, housing, join = st_intersects) %>%
group_by(zip) %>%
summarise(housing_count = n())
# Merge the count back with the original zipcode data
zipcode_with_count <- left_join(zipcode, zip_housing_count, by = "zip")
housing = read.csv("o4rtestdata/Affordable_Rental_Housing_Developments.csv")
zipcode <- st_read("o4rtestdata/ChiZipMaster1.geojson")
housing <- na.omit(housing)
housing <- st_as_sf(housing, coords = c("Longitude", "Latitude"), crs = 4326)
joined_data <- st_join(zipcode, housing, join = st_intersects)
housing_count <- joined_data %>%
group_by(zip) %>%
summarise(Count = n()) %>%
st_as_sf()
zipcode_with_housing_count <- merge(zipcode, housing_count, by = "zip")
housing_count <- joined_data %>%
group_by(ZIPCODE) %>%
summarise(Count = n())
housing_count <- joined_data %>%
group_by(zip) %>%
summarise(Count = n())
housing_count_nonspatial <- as.data.frame(housing_count)
zipcode_with_housing_count <- left_join(zipcode, housing_count_nonspatial, by = "zip")
plot <- ggplot(data = zipcode_with_housing_count) +
geom_sf(aes(fill = Count), color = NA) +
scale_fill_viridis_c() +
labs(title = "Number of Affordable Housing Developments per Zip Code",
fill = "# Developments") +
theme_minimal()
library(ggplot2)
plot <- ggplot(data = zipcode_with_housing_count) +
geom_sf(aes(fill = Count), color = NA) +
scale_fill_viridis_c() +
labs(title = "Number of Affordable Housing Developments per Zip Code",
fill = "# Developments") +
theme_minimal()
print(plot)
